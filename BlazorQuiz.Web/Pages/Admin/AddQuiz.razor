@page "/admin/add-quiz"
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<h1>Add Quiz</h1>
<hr/>
<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
	<DataAnnotationsValidator/>
	<div class="row">
		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label>">Category</label>
				<InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
					<option value="0">Select Category</option>
					@foreach (var category in _categories)
					{
						<option value="@category.Id">@category.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => _quiz.CategoryId)" />
			</div>
		</div>

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label>">Name</label>
				<InputText @bind-Value="_quiz.Name" class="form-control" />
				<ValidationMessage For="@(() => _quiz.Name)" />
			</div>
		</div>

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label>">Total Questions</label>
				<InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control" />
				<ValidationMessage For="@(() => _quiz.TotalQuestions)" />
			</div>
		</div>

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label>">Time in Minutes</label>
				<InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control" />
				<ValidationMessage For="@(() => _quiz.TimeInMinutes)" />
			</div>
		</div>

		<hr/>
		<h4 class="">Questions</h4>
		<ol>
			@foreach(var question in _quiz.Questions)
			{
				<li class="shadow p-3 mb-3">
					<textarea type="text" @bind="question.Text" class="form-control" placeholder="Question" rows="3"></textarea>
					<h6>Options</h6>
					<ol>
						@foreach (var option in question.Options)
						{
							var ramdom = Guid.NewGuid();
							<li class="p-2 mb-2">
								<div class="input-group">
									<div class="input-group-text">
										<input class="form-check-input mt-0" type="radio" 
										name="option_radio_@ramdom"
										checked="@option.IsCorrect"
										@onchange="()=> SetOptionAsCorrectAnswer(question,option)"
										>
									</div>
									<input type="text" @bind="option.Text" class="form-control">
									<button class="btn btn-danger" type="button" @onclick="()=>question.Options.Remove(option)">X</button>
								</div>
							</li>
						}
					</ol>
					<div class="d-flex justify-content-end">
						<button class="btn btn-sm btn-info" type="button" @onclick="()=>question.Options.Add(new())">+Add Option</button>
					</div>
				</li>
			}

		</ol>

		<div class="d-flex justify-content-center">
			<button class="btn btn-info" type="button" @onclick="()=> _quiz.Questions.Add(GetDefaultEmptyQuestion())">+Add Question</button>
		</div>

		


		<div class="col-sm-4">
			<div class="mb-3">
				<div class="form-check form-switch">
					<InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" checked/>
					<label class="form-check-label" for="quizIsActive">Is Active?</label>
				</div>
			</div>
		</div>
		<hr />
		<button type="submit" class="btn btn-success">Save Quiz</button>
	</div>

</EditForm>
@code {
	private QuizSaveDto _quiz = new();

	private CategoryDto[] _categories=[];
	protected override async Task OnInitializedAsync()
	{
		var question = GetDefaultEmptyQuestion();
		_quiz.Questions = [question];
		_categories = await CategoryApi.GetAllCategoriesAsync();
	}
	private QuestionDto GetDefaultEmptyQuestion()
	=> new QuestionDto
		{
			Options = [new(), new()]
		};
	private void SetOptionAsCorrectAnswer(QuestionDto q,OptionDto option)
	{
		foreach (var o in q.Options)
		{
			o.IsCorrect = false;
		}
		option.IsCorrect = true;

	}

	private async Task SaveQuizAsync()
	{
		var errorMessages = _quiz.Validate();
		if (!string.IsNullOrWhiteSpace(errorMessages))
		{
			await ShowAlertAsync(errorMessages);
			return;
		}
		var response = await QuizApi.SaveQuizAsync(_quiz);
		if(!response.IsSuccess)
		{
			await ShowAlertAsync(response.ErrorMessage);
			return;
		}
		NavigationManager.NavigateTo("/admin/manage-quizes");
	}

	private async Task ShowAlertAsync(string message, string title="Error") =>
	await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
}
