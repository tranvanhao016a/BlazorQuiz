@page "/admin/add-quiz"
@page "/admin/edit-quiz/{quizId:guid?}"
@using BlazorQuiz.Shared.DTO
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<SectionContent SectionName="pageTitle">
    @(IsEditCase ? "Update Quiz" : "Add New Quiz")
</SectionContent>
<hr />
<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label>">Category</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="0">Select Category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _quiz.CategoryId)" />
            </div>
        </div>

        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label>">Name</label>
                <InputText @bind-Value="_quiz.Name" class="form-control" />
                <ValidationMessage For="@(() => _quiz.Name)" />
            </div>
        </div>

        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label>">Total Questions</label>
                <InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control" />
                <ValidationMessage For="@(() => _quiz.TotalQuestions)" />
            </div>
        </div>

        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label>">Time in Minutes</label>
                <InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control" />
                <ValidationMessage For="@(() => _quiz.TimeInMinutes)" />
            </div>
        </div>

        <hr class="my-2" />
        <h3 class="fw-bold">Questions</h3>
        <ol class="mb-0
">
            @foreach (var question in _quiz.Questions)
            {
                <li class="p-3 mb-3 bg-white">
                    <textarea type="text" @bind="question.Text" class="form-control" placeholder="Question" rows="3"></textarea>
                    <h6 class="my-2 fw-bold">Options</h6>
                    <ol>
                        @foreach (var option in question.Options)
                        {
                            var ramdom = Guid.NewGuid();
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="radio"
                                               name="option_radio_@ramdom"
                                               checked="@option.IsCorrect"
                                               @onchange="()=> SetOptionAsCorrectAnswer(question,option)">
                                    </div>
                                    <input type="text" @bind="option.Text" class="form-control">
                                    <button class="btn btn-danger" type="button" @onclick="()=>question.Options.Remove(option)">X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-sm btn-info" type="button" @onclick="()=>question.Options.Add(new())">+Add Option</button>
                    </div>
                </li>
            }

        </ol>

        <div class="mt-0 mb-3 d-flex justify-content-center">
            <button class="btn btn-info" type="button" @onclick="()=> _quiz.Questions.Add(GetDefaultEmptyQuestion())">+Add Question</button>
        </div>
        <hr />
       <div class="row mb-5 align-content-center">
           <div class="col-sm-3 ms-auto d-flex justify-content-end">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" checked />
                    <label class="form-check-label" for="quizIsActive">Is Active?</label>
                </div>
           </div>
            <div class="col-sm-5 d-grid me-auto">
                <button type="submit" class="btn btn-success">Save Quiz</button>
            </div>
           
       </div>
        
    </div>
</EditForm>

@code {
    private QuizSaveDto _quiz = new();

    [Parameter] public Guid? QuizId { get; set; }

    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;
    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryApi.GetAllCategoriesAsync();
        if (IsEditCase)
        {
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            if (quiz == null)
            {
                NavigationManager.NavigateTo("/admin/manage-quizes");
                return;
            }
            ;
            _quiz = quiz;
        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Questions = new List<QuestionDto> { question };
        }
    }

	protected override void OnParametersSet()
	{
		if (!QuizId.HasValue && _quiz.Id != Guid.Empty)
		{
			_quiz = new();
            _quiz.Questions = [GetDefaultEmptyQuestion()];
			
		}
		
	}
    private QuestionDto GetDefaultEmptyQuestion()
    => new QuestionDto
        {
            Options = new List<OptionDto> { new(), new() }
        };

    private void SetOptionAsCorrectAnswer(QuestionDto q, OptionDto option)
    {
        foreach (var o in q.Options)
        {
            o.IsCorrect = false;
        }
        option.IsCorrect = true;
    }

    private async Task SaveQuizAsync()
    {
        var errorMessages = _quiz.Validate();
        if (!string.IsNullOrWhiteSpace(errorMessages))
        {
            await ShowAlertAsync(errorMessages);
            return;
        }
        var response = await QuizApi.SaveQuizAsync(_quiz);
        if (!response.IsSuccess)
        {
            await ShowAlertAsync(response.ErrorMessage);
            return;
        }
        NavigationManager.NavigateTo("/admin/manage-quizes");
    }

    private async Task ShowAlertAsync(string message, string title = "Error") =>
        await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
}
