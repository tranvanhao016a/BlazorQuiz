@page "/student/quiz"
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IStudentQuizApi StudentQuizApi

<SectionContent SectionName="pageTitle">
	Quiz - @QuizState.Quiz.Name
	[<small>

		@QuizState.Quiz.TotalQuestions questions(s)

	</small>]
</SectionContent>

<div class="row mb-3">
	<div class="col-sm-12">
		<h4 class="mt-3 mb-0 fw-bold">
			@_question.Text
		</h4>
		<hr/>

		@foreach(var o in _question.Options)
		{
			<div class="d-flex gap-2 p-3 mb-3 bg-white option-box">
				<input type="radio" class="" name="rdo_@_question.Id" id="rdo_@o.Id"
					   checked="@(_selecteOptionId == o.Id)"
					   @onchange="()=>_selecteOptionId = o.Id"/>
				<label for="rdo_@o.Id" class="d-block">@o.Text</label>
			</div>
		}
		<hr/>

		<div class="d-flex justify-content-between align-items-center">
			<button type="button" class="btn btn-danger" @onclick="ExitQuizAsync">Exit Test</button>
			@if(!IsLastQuestion)
			{
				<button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next</button>
			}
			<button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>
		</div>
	</div>




</div>

@code {

	private QuestionDto? _question = new();

	private int _selecteOptionId;

	private List<QuestionDto> _questions = [];
	private bool IsLastQuestion => _questions.Count == (QuizState.Quiz.TotalQuestions - 1);
	protected override async Task OnInitializedAsync()
	{
		if (QuizState.Quiz == null || QuizState.StudentQuizId == 0)
		{
			NavigationManager.NavigateTo("student/home", replace: true);
			return;
		}

		QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
		if (!result.IsSuccess || result.Data == null)
		{
			// Show error alert
			return;
		}
		_question = result.Data;

	}

	private async Task ExitQuizAsync()
	{
		
	}
	
	private async Task SaveAndNextQuestionAsync()
	{
		// QuizApiResponse<bool> result = await StudentQuizApi.SaveAnswerAsync(QuizState.StudentQuizId, _question.Id, _selecteOptionId);
		// if (!result.IsSuccess)
		// {
		// 	Show error alert
		// 	return;
		// }
		// if (IsLastQuestion)
		// {
		// 	await SubmitQuizAsync();
		// 	return;
		// }
		// QuizApiResponse<QuestionDto?> nextQuestionResult = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
		// if (!nextQuestionResult.IsSuccess || nextQuestionResult.Data == null)
		// {
		// 	Show error alert
		// 	return;
		// }
		// _question = nextQuestionResult.Data;
		// _selecteOptionId = 0;
	}

	private async Task SubmitQuizAsync()
	{
		// QuizApiResponse<bool> result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
		// if (!result.IsSuccess)
		// {
		// 	Show error alert
		// 	return;
		// }
		// NavigationManager.NavigateTo("student/home", replace: true);
	}
}
