@page "/auth/login"
@layout EmptyLayout
@inject IAuthApi AuthApi

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">
            <div class="mt-3">
                <h1 class="h3">
                    Login | Blazing Quiz
                </h1>
            </div>
            <hr />
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="_model.Username"/>
                    <ValidationMessage For="() => _model.Username"/>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" id="password" class="form-control" @bind-Value="_model.Password"/>
                    <ValidationMessage For="() => _model.Password"/>
                </div>
				@if (_error != null)
				{
					<div class="mb-3 bg-danger text-white p-2">
                        <p>
							@_error
                        </p>
                    </div>
				}
                <div class="mb-3">
                    @if (!_isBusy)
                    {
                        <button type="submit" class="btn btn-success">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">
                            Logging-in...
                        </button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDto _model = new();
    private bool _isBusy;
	private string? _error;
    private async Task LoginAsync()
    {
		_error = null;
        _isBusy = true;

        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);
            if(authResponse.HasError)
            {
				_error = authResponse.ErrorMessage;
				return;
            }
			//set the login token in some storage
			NavigationManager.NavigateTo("/");

			
		}
		catch (Exception ex)
		{
			_error = ex.Message;
		}
		finally
		{
			_isBusy = false;
		}
	}
}
}
